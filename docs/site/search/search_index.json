{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"LJI RNASEQ QC PIPELINE Niu Du (ndu [at] lji.org) AY and VIJAY labs La Jolla Institute for Immunology (LJI) La Jolla, CA USA Current version: 1.4 (03/18/2020) Summary This pipeline was implemented for RNA-Seq data mapping, QC as part of the interactive work flow between sequence and bioinfomatics team. The overall guildline for scuccessful excution a data preprocessing step is as follows: The pipeline was developed in Sun Grid Engine (SGE) environment however can be can be implemented in any cluster and cloud environments with proper modifications. Make sure the following tools have been installed on the server fastp | STAR-seq mapping | Qualimap | Samtools | Deeptools","title":"Home"},{"location":"#lji-rnaseq-qc-pipeline","text":"Niu Du (ndu [at] lji.org) AY and VIJAY labs La Jolla Institute for Immunology (LJI) La Jolla, CA USA Current version: 1.4 (03/18/2020)","title":"LJI RNASEQ QC PIPELINE"},{"location":"#summary","text":"This pipeline was implemented for RNA-Seq data mapping, QC as part of the interactive work flow between sequence and bioinfomatics team. The overall guildline for scuccessful excution a data preprocessing step is as follows: The pipeline was developed in Sun Grid Engine (SGE) environment however can be can be implemented in any cluster and cloud environments with proper modifications. Make sure the following tools have been installed on the server fastp | STAR-seq mapping | Qualimap | Samtools | Deeptools","title":"Summary"},{"location":"QC_Tutorial/","text":"QC tutorial Step 1: overview To get an idea about the overall quality of RNASeq result, you can refer to the recommendation and outlier columns in the main QC report page. In general, you should find most of your samples labeled with 1.Good and No in those two columns, respectively. If not, there might be critical issues in sample prep or sequencing steps that need to be diagnosed separately. The links to PCA plot , QC parameters and QC plots are located on the top left corner of the report table, while the sample specific QC reports are located on the right side of their corresponding sample IDs. Step 2: Examine PCA The interactive PCA plot allows you to quickly inspect meta information of each sample. If no meta table was provided in the json file, you can still check the recommendation and Outlier information in respect to each sample. To select meta information, click on the dropdown menu and select the target item. You can make specific category invisible by click its symbol at the bottom left corner. Step 3: Examine QC table The QC table includes all important QC parameters and should be your main source of information for manual QC. We used fairly stringent criteria for ranking the sample quality, therefore it is pretty safe to ignore a sample marked as a good sample and not a outlier (in most cases a good sample should not be a outlier). If a category 2 or 3 sample was not in the good list but close enough due to the stringent criteria, you might not need to re-sequence it. Besides these scenarios, the sample need to be resequenced or the library should be redone. If not possible then the sample should be eliminated. Below is the dictionary of QC parameters used. Parameter Note total_reads All paired end reads; each pair is considered one read filtered_reads fastp filtered reads with low complexity and low quality reads removed filtered_reads_perc percentage of remaining reads after fastq QC adaptor_trimm_perc percentage of reads that have adaptor content and have been trimmed dup_rate percentage of fastq sequence that have duplicated reads uniquely_mapped_reads reads only mapped to one location of the genome model uniquely_mapped_reads_perc percentage of uniquely mapped reads spliced_reads total number of splicing events in each read anno_spliced_reads Splicing known in splice junction database too_short_reads the overlap between reads and genome is less than the minimal set level; in STAR the default is 60% of seqeuence length too_short_reads_perc percentage of those too short reads exonic_perc percentage of reads mapped to exonic regions intronic_perc percentage of reads mapped to intronic regions intergenic_perc percentage of reads mapped to intergenic regions bias_5_prim mean expression of 5' divided by mean expression of transcript bias_3_prim mean expression of 3' divided by mean expression of transcript bias_5to3_prim the ratio between both 5' and 3' biases STAR_counts STAR generated count table sum by samples STAR_counts_perc STAR counts in total uniquely mapped reads t_rRNA_counts_perc percentage of tRNA and rRNA in the total STAR counts protein_coding_perc percentage of protein coding gene counts in the total STAR counts pseudogene_perc percentage of pseudogene counts in the total STAR counts long-noncoding_perc percentage of long-noncoding mRNA counts in the total STAR counts short-noncoding_perc percentage of short-noncoding mRNA counts in the total STAR counts final_STAR_counts STAR count counts sum by sample excluding tRNA and rRNA counts insert_mean mean insert size of paired end reads insert_median median insert size of paired end reads Total_genes Total number of genes identified after mapping Step 4: Examine QC plots The QC plots folder contains three types of figures that can assist your diagnoses of RNASeq sample quality in step 3. - The first type is a simple visualization of QC parameters with dash lines mark where the set thresholds are compare to the real data (QC parameter in file names); In these figures, Good sample points were condensed to the left side for allowing more space for the others that need to be examined. - The second type is the bam coverage plots and each file represents one quality level (file name start with bamcoverage); - The third type contains information that shows additional QC measures and here are the details: STAR_minimal_counts_soft_threshold: Total number of genes recovered was plotted as a function of STAR counts, and saturation function was used to fit the data. Once fitted, the algorithm first detected the minimal STAR counts required for yielding defined gene recovery percentage and compared it to the set level. The higher value of them was then used as the final minimal STAR counts threshold for separating samples that need to be resequenced (if less than the threshold and have no other issues). After that, normal distribution parameters were calculated for total gene numbers of all other samples that are above the minimal STAR counts threshold, and we considered any sample fell below 95% confidence interval need to be manually QCed. The minimal percentage of gene recovery can be specified in the json config file. scenario 1: a soft threshold was used scenario 2: soft threshold less than set level and the later one was used Spearman_correlation:Pairwise spearman correlation of all samples was calculated for detecting outlier. We assume the mean spearman value of each sample should be within the normal distribution of all sample means with 95% confidence (one tail). If not then that sample will be marked as 'outlier'.","title":"QC tutorial"},{"location":"QC_Tutorial/#qc-tutorial","text":"","title":"QC tutorial"},{"location":"QC_Tutorial/#step-1-overview","text":"To get an idea about the overall quality of RNASeq result, you can refer to the recommendation and outlier columns in the main QC report page. In general, you should find most of your samples labeled with 1.Good and No in those two columns, respectively. If not, there might be critical issues in sample prep or sequencing steps that need to be diagnosed separately. The links to PCA plot , QC parameters and QC plots are located on the top left corner of the report table, while the sample specific QC reports are located on the right side of their corresponding sample IDs.","title":"Step 1: overview"},{"location":"QC_Tutorial/#step-2-examine-pca","text":"The interactive PCA plot allows you to quickly inspect meta information of each sample. If no meta table was provided in the json file, you can still check the recommendation and Outlier information in respect to each sample. To select meta information, click on the dropdown menu and select the target item. You can make specific category invisible by click its symbol at the bottom left corner.","title":"Step 2: Examine PCA"},{"location":"QC_Tutorial/#step-3-examine-qc-table","text":"The QC table includes all important QC parameters and should be your main source of information for manual QC. We used fairly stringent criteria for ranking the sample quality, therefore it is pretty safe to ignore a sample marked as a good sample and not a outlier (in most cases a good sample should not be a outlier). If a category 2 or 3 sample was not in the good list but close enough due to the stringent criteria, you might not need to re-sequence it. Besides these scenarios, the sample need to be resequenced or the library should be redone. If not possible then the sample should be eliminated. Below is the dictionary of QC parameters used. Parameter Note total_reads All paired end reads; each pair is considered one read filtered_reads fastp filtered reads with low complexity and low quality reads removed filtered_reads_perc percentage of remaining reads after fastq QC adaptor_trimm_perc percentage of reads that have adaptor content and have been trimmed dup_rate percentage of fastq sequence that have duplicated reads uniquely_mapped_reads reads only mapped to one location of the genome model uniquely_mapped_reads_perc percentage of uniquely mapped reads spliced_reads total number of splicing events in each read anno_spliced_reads Splicing known in splice junction database too_short_reads the overlap between reads and genome is less than the minimal set level; in STAR the default is 60% of seqeuence length too_short_reads_perc percentage of those too short reads exonic_perc percentage of reads mapped to exonic regions intronic_perc percentage of reads mapped to intronic regions intergenic_perc percentage of reads mapped to intergenic regions bias_5_prim mean expression of 5' divided by mean expression of transcript bias_3_prim mean expression of 3' divided by mean expression of transcript bias_5to3_prim the ratio between both 5' and 3' biases STAR_counts STAR generated count table sum by samples STAR_counts_perc STAR counts in total uniquely mapped reads t_rRNA_counts_perc percentage of tRNA and rRNA in the total STAR counts protein_coding_perc percentage of protein coding gene counts in the total STAR counts pseudogene_perc percentage of pseudogene counts in the total STAR counts long-noncoding_perc percentage of long-noncoding mRNA counts in the total STAR counts short-noncoding_perc percentage of short-noncoding mRNA counts in the total STAR counts final_STAR_counts STAR count counts sum by sample excluding tRNA and rRNA counts insert_mean mean insert size of paired end reads insert_median median insert size of paired end reads Total_genes Total number of genes identified after mapping","title":"Step 3: Examine QC table"},{"location":"QC_Tutorial/#step-4-examine-qc-plots","text":"The QC plots folder contains three types of figures that can assist your diagnoses of RNASeq sample quality in step 3. - The first type is a simple visualization of QC parameters with dash lines mark where the set thresholds are compare to the real data (QC parameter in file names); In these figures, Good sample points were condensed to the left side for allowing more space for the others that need to be examined. - The second type is the bam coverage plots and each file represents one quality level (file name start with bamcoverage); - The third type contains information that shows additional QC measures and here are the details: STAR_minimal_counts_soft_threshold: Total number of genes recovered was plotted as a function of STAR counts, and saturation function was used to fit the data. Once fitted, the algorithm first detected the minimal STAR counts required for yielding defined gene recovery percentage and compared it to the set level. The higher value of them was then used as the final minimal STAR counts threshold for separating samples that need to be resequenced (if less than the threshold and have no other issues). After that, normal distribution parameters were calculated for total gene numbers of all other samples that are above the minimal STAR counts threshold, and we considered any sample fell below 95% confidence interval need to be manually QCed. The minimal percentage of gene recovery can be specified in the json config file. scenario 1: a soft threshold was used scenario 2: soft threshold less than set level and the later one was used Spearman_correlation:Pairwise spearman correlation of all samples was calculated for detecting outlier. We assume the mean spearman value of each sample should be within the normal distribution of all sample means with 95% confidence (one tail). If not then that sample will be marked as 'outlier'.","title":"Step 4: Examine QC plots"},{"location":"Reference_genome/","text":"Reference genome The general rule of making reference index should follow STAR's tutorial , and any change/addition/deletion of the reference files must be properly documented. Here are the source of implemented reference files where we downloaded reference genome from: 1. Human genome version GRCh37: Full genome reference downloaded from GENCODE Release 19 (GRCh37.p13) , Bed file downloaded from Rseqc reference hg19 . Human genome version GRCh38: Primary assemble genome reference downloaded from GENCODE Release 32 (GRCh38.p13) , Bed file downloaded from Rseqc reference hg38 . Mouse genome version GRCm38: Primary assemble genome reference downloaded from GENCODE Release 23 , Bed file downloaded from Rseqc reference mm10 . Importantly, STAR recommended to exclude patches and alternative haplotypes from the genome model (see tutorial section 2.2.1), therefore you should only use the primary assemble for mapping. In case only full genome model is available, you can use the following python script or your own code to trim the genome file. touch remove_patch.py and put in the following code # /usr/bin/env python3 # remove PATCH and Alternative haplotypes from fasta file # usage remove_patch.py in.fasta > output.fasta from Bio import SeqIO import sys in_fasta = sys.argv[1] ffile = SeqIO.parse(in_fasta, \"fasta\") header_pattern = ['PATCH','HSCHR'] for seq_record in ffile: if not any([i in seq_record.description for i in header_pattern]): print(seq_record.format('fasta')) For making reference index; please make proper changes according to your settings #!/bin/bash #PBS -N STAR_gen_37 #PBS -o /mnt/BioScratch/ndu/gen_reference/out_STAR_gen_37 #PBS -e /mnt/BioScratch/ndu/gen_reference/err_STAR_gen_37 #PBS -q default #PBS -l nodes=1:ppn=4 #PBS -l mem=40gb #PBS -l walltime=20:00:00 cd /mnt/BioAdHoc/Groups/vd-ay/RNASeq_Workflow/Reference mkdir -p /mnt/BioScratch/ndu/gen_reference # trim off batches and alternative haplotypes if needed ./remove_patch.py GRCH37.P13/GRCh37.p13.genome.fa > GRCH37.P13/GRCh37.p13.genome.primary_assembly.fa STAR --runThreadN 4 --runMode genomeGenerate --genomeDir ./GRCH37.P13 --genomeFastaFiles ./GRCH37.P13/GRCh37.p13.genome.primary_assembly.fa --sjdbGTFfile ./GRCH37.P13/gencode.v19.annotation.gtf --sjdbOverhang 100 Separately, an annotation file should be made for counting reads by gene type (gene_type_4) and TPM calculation in the pipeline. A example human GRCh37 annotation file can be downloaded here . To make the annotation table, you will need to execute the following steps: Getting gene name and type for each ensembl ID. You can export annotations table for GRCh37 and GRCh38 from ensembl biomart. Mouse gene annotations are also available from these links. Merge gene types so 4 categories. The dictionary for merging of gene types can be downloaded here . Getting exon length for each gene; this is a common output from most counting tools such as featureCounts and HTSeq, or you can download from a confident source.","title":"Create reference"},{"location":"Reference_genome/#reference-genome","text":"The general rule of making reference index should follow STAR's tutorial , and any change/addition/deletion of the reference files must be properly documented. Here are the source of implemented reference files where we downloaded reference genome from: 1. Human genome version GRCh37: Full genome reference downloaded from GENCODE Release 19 (GRCh37.p13) , Bed file downloaded from Rseqc reference hg19 . Human genome version GRCh38: Primary assemble genome reference downloaded from GENCODE Release 32 (GRCh38.p13) , Bed file downloaded from Rseqc reference hg38 . Mouse genome version GRCm38: Primary assemble genome reference downloaded from GENCODE Release 23 , Bed file downloaded from Rseqc reference mm10 . Importantly, STAR recommended to exclude patches and alternative haplotypes from the genome model (see tutorial section 2.2.1), therefore you should only use the primary assemble for mapping. In case only full genome model is available, you can use the following python script or your own code to trim the genome file. touch remove_patch.py and put in the following code # /usr/bin/env python3 # remove PATCH and Alternative haplotypes from fasta file # usage remove_patch.py in.fasta > output.fasta from Bio import SeqIO import sys in_fasta = sys.argv[1] ffile = SeqIO.parse(in_fasta, \"fasta\") header_pattern = ['PATCH','HSCHR'] for seq_record in ffile: if not any([i in seq_record.description for i in header_pattern]): print(seq_record.format('fasta')) For making reference index; please make proper changes according to your settings #!/bin/bash #PBS -N STAR_gen_37 #PBS -o /mnt/BioScratch/ndu/gen_reference/out_STAR_gen_37 #PBS -e /mnt/BioScratch/ndu/gen_reference/err_STAR_gen_37 #PBS -q default #PBS -l nodes=1:ppn=4 #PBS -l mem=40gb #PBS -l walltime=20:00:00 cd /mnt/BioAdHoc/Groups/vd-ay/RNASeq_Workflow/Reference mkdir -p /mnt/BioScratch/ndu/gen_reference # trim off batches and alternative haplotypes if needed ./remove_patch.py GRCH37.P13/GRCh37.p13.genome.fa > GRCH37.P13/GRCh37.p13.genome.primary_assembly.fa STAR --runThreadN 4 --runMode genomeGenerate --genomeDir ./GRCH37.P13 --genomeFastaFiles ./GRCH37.P13/GRCh37.p13.genome.primary_assembly.fa --sjdbGTFfile ./GRCH37.P13/gencode.v19.annotation.gtf --sjdbOverhang 100 Separately, an annotation file should be made for counting reads by gene type (gene_type_4) and TPM calculation in the pipeline. A example human GRCh37 annotation file can be downloaded here . To make the annotation table, you will need to execute the following steps: Getting gene name and type for each ensembl ID. You can export annotations table for GRCh37 and GRCh38 from ensembl biomart. Mouse gene annotations are also available from these links. Merge gene types so 4 categories. The dictionary for merging of gene types can be downloaded here . Getting exon length for each gene; this is a common output from most counting tools such as featureCounts and HTSeq, or you can download from a confident source.","title":"Reference genome"},{"location":"Workflow/","text":"LJI Sequencing core RNA-Seq workflow Prerequisites Install all required python libraries; we recommend using conda to manage your vitual environment if outside LJI environment. >conda create -n RNA_SEQ python=3.7 >conda activate RNA_SEQ >which python >/anaconda3/envs/RNA_SEQ/bin/python for starters at LJI you can use: >/mnt/BioHome/ndu/anaconda3/bin/python RNA QC logistics - Run samples I. Make a clone of this repository to your own directory. If you do not have required packages pre-installed, please download and install them on the cluster server following the links in the main page. II. Edit the both .sh files to enure the link to the python scripts are correct; for example, if your cloned directory is >/home/YOURNAME/RNA_SEQ_PIPELINE change the excution line in 1.RNA_Seq_Mapping.sh to >/anaconda3/envs/RNA_SEQ/bin/python /home/YOURNAME/RNA_SEQ_PIPELINE/Pipeline_functions/RNA_SEQ_sub_GO.py -c conf_RNA_Seq.json -i fastq_table.csv -n 4 -seq \"Paired\" III. The RNA_SEQ_sub_GO.py script takes 4 inputs: -c - config file, -i fastq location table, -n cpus, -seq single ended \"Single\" or pair ended \"Paired\" input fastq type. For best performance please use the default cpu setting if possible. Example of fastq table; note that the names in the sample ID will be used for naming all of the down stream files. sample ID fastq_f fastq_r sample 1 Fastq_input/sample_1_R1.fastq.gz Fastq_input/sample_1_R2.fastq.gz sample 2 Fastq_input/sample_2_R1.fastq.gz Fastq_input/sample_2_R2.fastq.gz sample 3 Fastq_input/sample_3_R1.fastq.gz Fastq_input/sample_3_R2.fastq.gz IV. Modify json file based on your settings . In most cases you will only need to edit the \"dirin\" and \"metadata_dir\" in \"config\", for changing reference genome please go to Reference genome , and for changing QC criteria please go to QC parameters . Architecture of the json configuration file optional: Example of metadata file; if the number of samples in metadata file is less than the total number of samples processed by the pipeline, only those in the metadata file will be shown in the PCA plot. The value of metadata_dir can be left empty (set to \" \"), and only QC results will be used in the PCA plot. sample ID Sex Disease sample 1 Male yes sample 2 Female No sample 3 Male No V. Execute >qsub 1.RNA_Seq_Mapping.sh on the server; this run will create necessary folders and generate bash files in the 'Submission' folder for running the pipelines in parallel, and a '2.Submissions.sh' file in the working directory. Once finished please go to the Submission folder and double check one or two files and make sure the settings were properly configured in the scripts if you are not certain. VI. Execute >bash 2.Submissions.sh on the server; this step will qsub all bash files in the Submission folder. If your sample number is more than that the cluster could handle, considering separate them into different batches. VII. Once all submissions have been completed, execute >qsub 3.RNA_Seq_QC.sh to generate QC report and plots. The 'QC_report.html' will be generated inside the working directory with links to other plots and tables. - Update the sequencing run log ( VD_Vijay&Ay_Bioinfo_log ) * note: Fill the 'Seq QC location' column with the QC report link using this format =HYPERLINK(\"https://informaticsdata.liai.org/NGS_analyses/ad_hoc/Groups/YOUR_DIR.../QC_report.html\",\"report\") At this point you need to contact the person in charge of the project to manually check samples in category 3 (manual QC) following the QC tutorial . Once finished the 'failed' samples together with the category 2 (reseq) samples will be resequenced by the sequence team; you need to notify them. - Update libraries Once the re-sequencing step is finished, you will get the updated fastq files from the sequence team (or bcl files where you can extract the fastq files from). If the sample was only resequenced due to low sequencing depth without using new library, merge the old and new fastq files together and qsub the corresponding bash file in the Submission folder, and then redo step VII. If an new library was used for sequencing or the sequencing run had issues, delete the old fastq file and do the above steps. Usually the QC step can be done within one iteration, however in case when multiple iterations are required, the same principle guidelines can be applied.","title":"General workflow"},{"location":"Workflow/#lji-sequencing-core-rna-seq-workflow","text":"","title":"LJI Sequencing core RNA-Seq workflow"},{"location":"Workflow/#prerequisites","text":"Install all required python libraries; we recommend using conda to manage your vitual environment if outside LJI environment. >conda create -n RNA_SEQ python=3.7 >conda activate RNA_SEQ >which python >/anaconda3/envs/RNA_SEQ/bin/python for starters at LJI you can use: >/mnt/BioHome/ndu/anaconda3/bin/python","title":"Prerequisites"},{"location":"Workflow/#rna-qc-logistics","text":"- Run samples I. Make a clone of this repository to your own directory. If you do not have required packages pre-installed, please download and install them on the cluster server following the links in the main page. II. Edit the both .sh files to enure the link to the python scripts are correct; for example, if your cloned directory is >/home/YOURNAME/RNA_SEQ_PIPELINE change the excution line in 1.RNA_Seq_Mapping.sh to >/anaconda3/envs/RNA_SEQ/bin/python /home/YOURNAME/RNA_SEQ_PIPELINE/Pipeline_functions/RNA_SEQ_sub_GO.py -c conf_RNA_Seq.json -i fastq_table.csv -n 4 -seq \"Paired\" III. The RNA_SEQ_sub_GO.py script takes 4 inputs: -c - config file, -i fastq location table, -n cpus, -seq single ended \"Single\" or pair ended \"Paired\" input fastq type. For best performance please use the default cpu setting if possible. Example of fastq table; note that the names in the sample ID will be used for naming all of the down stream files. sample ID fastq_f fastq_r sample 1 Fastq_input/sample_1_R1.fastq.gz Fastq_input/sample_1_R2.fastq.gz sample 2 Fastq_input/sample_2_R1.fastq.gz Fastq_input/sample_2_R2.fastq.gz sample 3 Fastq_input/sample_3_R1.fastq.gz Fastq_input/sample_3_R2.fastq.gz IV. Modify json file based on your settings . In most cases you will only need to edit the \"dirin\" and \"metadata_dir\" in \"config\", for changing reference genome please go to Reference genome , and for changing QC criteria please go to QC parameters .","title":"RNA QC logistics"},{"location":"Workflow/#architecture-of-the-json-configuration-file","text":"optional: Example of metadata file; if the number of samples in metadata file is less than the total number of samples processed by the pipeline, only those in the metadata file will be shown in the PCA plot. The value of metadata_dir can be left empty (set to \" \"), and only QC results will be used in the PCA plot. sample ID Sex Disease sample 1 Male yes sample 2 Female No sample 3 Male No V. Execute >qsub 1.RNA_Seq_Mapping.sh on the server; this run will create necessary folders and generate bash files in the 'Submission' folder for running the pipelines in parallel, and a '2.Submissions.sh' file in the working directory. Once finished please go to the Submission folder and double check one or two files and make sure the settings were properly configured in the scripts if you are not certain. VI. Execute >bash 2.Submissions.sh on the server; this step will qsub all bash files in the Submission folder. If your sample number is more than that the cluster could handle, considering separate them into different batches. VII. Once all submissions have been completed, execute >qsub 3.RNA_Seq_QC.sh to generate QC report and plots. The 'QC_report.html' will be generated inside the working directory with links to other plots and tables. - Update the sequencing run log ( VD_Vijay&Ay_Bioinfo_log ) * note: Fill the 'Seq QC location' column with the QC report link using this format =HYPERLINK(\"https://informaticsdata.liai.org/NGS_analyses/ad_hoc/Groups/YOUR_DIR.../QC_report.html\",\"report\") At this point you need to contact the person in charge of the project to manually check samples in category 3 (manual QC) following the QC tutorial . Once finished the 'failed' samples together with the category 2 (reseq) samples will be resequenced by the sequence team; you need to notify them. - Update libraries Once the re-sequencing step is finished, you will get the updated fastq files from the sequence team (or bcl files where you can extract the fastq files from). If the sample was only resequenced due to low sequencing depth without using new library, merge the old and new fastq files together and qsub the corresponding bash file in the Submission folder, and then redo step VII. If an new library was used for sequencing or the sequencing run had issues, delete the old fastq file and do the above steps. Usually the QC step can be done within one iteration, however in case when multiple iterations are required, the same principle guidelines can be applied.","title":"Architecture of the json configuration file"}]}